import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
from matplotlib.collections import LineCollection
import numpy as np

def draw_line(ax, x1, y1, x2, y2, color='blue'):
    line = [(x1, y1), (x2, y2)]
    ax.add_collection(LineCollection([line], colors=color))
    ax.plot([x1, x2], [y1, y2], 'o', color=color)

def draw_rectangle(ax, xmin, ymin, xmax, ymax):
    rect = Rectangle((xmin, ymin), xmax - xmin, ymax - ymin, linewidth=1, edgecolor='red', facecolor='none')
    ax.add_patch(rect)

def clip_line(ax, x1, y1, x2, y2, xmin, ymin, xmax, ymax):
    # Алгоритм отсечения Сазерленда-Коэна
    code1 = get_code(x1, y1, xmin, ymin, xmax, ymax)
    code2 = get_code(x2, y2, xmin, ymin, xmax, ymax)

    if code1 == code2 == '0000':
        draw_line(ax, x1, y1, x2, y2, color='green')  # Видимый отрезок
    elif any([a == '1' and b == '1' for a, b in zip(code1, code2)]):
        pass  
    else:
        
        x1, y1, x2, y2 = cohen_sutherland(x1, y1, x2, y2, xmin, ymin, xmax, ymax)
        draw_line(ax, x1, y1, x2, y2, color='green')

def get_code(x, y, xmin, ymin, xmax, ymax):
    code = ''
    code += '1' if x < xmin else '0'
    code += '1' if x > xmax else '0'
    code += '1' if y < ymin else '0'
    code += '1' if y > ymax else '0'
    return code

def cohen_sutherland(x1, y1, x2, y2, xmin, ymin, xmax, ymax):
    dx, dy = x2 - x1, y2 - y1
    m = dy / dx if dx != 0 else float('inf')

    def intersect(x, y):
        nonlocal x1, y1, x2, y2, xmin, ymin, xmax, ymax
        if x1 <= x <= x2 and ymin <= y <= ymax:
            return True, (x, y)
        elif xmin <= x <= xmax and y1 <= y <= y2:
            return True, (x, y)
        return False, (0, 0)

    if m == 0:
        y = y1
        intersects1, p1 = intersect(xmin, y)
        intersects2, p2 = intersect(xmax, y)
        if intersects1 and intersects2:
            return p1[0], p1[1], p2[0], p2[1]
    else:
        x = x1
        intersects1, p1 = intersect(x, ymin)
        intersects2, p2 = intersect(x, ymax)
        if intersects1 and intersects2:
            return p1[0], p1[1], p2[0], p2[1]

    return x1, y1, x2, y2

def main():
    fig, ax = plt.subplots()

    # Исходные данные
    lines = [(50, 30, 150, 130), (120, 100, 200, 20), (10, 80, 120, 80)]
    xmin, ymin, xmax, ymax = 70, 50, 170, 120

    
    ax.axhline(0, color='black',linewidth=0.5)
    ax.axvline(0, color='black',linewidth=0.5)

   
    draw_rectangle(ax, xmin, ymin, xmax, ymax)

    
    for line in lines:
        draw_line(ax, *line, color='blue')

   
    for line in lines:
        clip_line(ax, *line, xmin, ymin, xmax, ymax)

    plt.show()

if __name__ == "__main__":
    main()
