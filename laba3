import cv2
import numpy as np
import matplotlib.pyplot as plt

def plot_histogram(image, title):
    histogram = cv2.calcHist([image], [0], None, [256], [0, 256])
    plt.plot(histogram, color='black')
    plt.title(title)
    plt.xlabel('Pixel Value')
    plt.ylabel('Frequency')
    plt.show()

def linear_contrast(image, alpha, beta):
    contrasted_image = cv2.convertScaleAbs(image, alpha=alpha, beta=beta)
    return contrasted_image

def histogram_equalization(image):
    equalized_image = cv2.equalizeHist(image)
    return equalized_image

def hsv_histogram_equalization(image):
    hsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    hsv_image[:, :, 2] = cv2.equalizeHist(hsv_image[:, :, 2])
    equalized_image = cv2.cvtColor(hsv_image, cv2.COLOR_HSV2BGR)
    return equalized_image

def main():
   
    image_path = "path to image.jpg"
    original_image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

 
    plot_histogram(original_image, 'Original Histogram')


    alpha = 1.5
    beta = 30
    contrasted_image = linear_contrast(original_image, alpha, beta)
    plot_histogram(contrasted_image, 'Linear Contrast Histogram')

    equalized_image = histogram_equalization(original_image)
    plot_histogram(equalized_image, 'Equalized Histogram')


    hsv_equalized_image = hsv_histogram_equalization(cv2.imread(image_path))
    plot_histogram(hsv_equalized_image[:, :, 2], 'HSV Equalized Histogram')


    cv2.imshow('Original Image', original_image)
    cv2.imshow('Linear Contrast', contrasted_image)
    cv2.imshow('Histogram Equalization', equalized_image)
    cv2.imshow('HSV Equalization', hsv_equalized_image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
